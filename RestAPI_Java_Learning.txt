API:

If UI is in angular or tagged to another UI like yellowpages, tripadvisor etc, then, UI cannot render data from backend code where data is sent accessed with database.

UI(java) -> Backend code (java) -> database (api is not needed)
UI(angular) -> Backend code (java) -> database (api is required to get data from angular, to convert user input details to json or xml format and send to backend code)
UI of tripadvisor(java or any) -> Backend code of vythiri -> database (api is needed since, tripadvisor is another company which shouldn't or can't access backend code of vythiri.

HTTP methods:

GET - get data from backend (Retrieve R)
POST - create new registration, new details to database (create C)
PUT- update existing details (Update U)
DELETE - delete any data already present (Delete D)

CRUD operations in short.

Resource or collection -> this determines which type of api to access in endpoint/baseurl
for eg:
google.com/maps -> google.com is baseurl and maps is a resource or collection Both baseurl and maps together is called endpoint. Baseurl is where server the server is located.
google.com/images -> google.com is baseurl and images is a resource

Path Parameter:
https://www.google.com/maps/111234 -> google.com is baseurl and maps is a resource or collectionor
collection, 111234 is a path parameter or ID or subresource, requesting api with response for parameter only 111234.

https://www.amazon.com/orders?sort_ by=20/12/2020  -> here date is not a sub resource, it is not drilling into orders, its just fetching the existing order by filtering. ? is query parameter.

Syntax for end point: baseurl/resource/(queryorpath) parameter

Header and cookies -> give additional details to api from UI.

To start testing api below "API Contract" should be provided by dev team:

BaseURl
Resource
Query
Http Method (POST OR DELETE OR PUT OR GET)
Sample Body

POST:
Key value is required in most of the APIs. few may not. It will be all updated in API Contract given by dev team.
give Params (Key and value - key, qaclick123) and give the body. when sent, details will be saved in database generating a place_id. It is unique for each record in database. Hence, other operations like GET, PUT, DELETE can be performed using place_id.

GET
give Params (Key and value - key, qaclick 123) and place_id and use GET API.

PUT:
in body, select raw and text as json
{
"place_id":"60bc31104f80eeca306516fde3460f43",
"address":"msnhighwa1y, USA",
"key":"qaclick123"
}

now if you see using GET request with place_id and key param, updated address will be displayed.
Note that in PUT request, it is enough if json has place_id and key.  Params update is not required.
It is all based on developers how they provide API contract. It varies for each API and developer.

DELETE:
give key param qaclick123 as always.
{
    "place_id":"60bc31104f80eeca306516fde3460f43"
}

Note: GET and POST are the http methods used usually. POST can take care of both update and delete if that respective api is used. 

***************************************

Coding:

Start coding with below static imports:

import static io.restassured.RestAssured.*;
import static org.hamcrest.Matchers.*;

Usual eclipse create java proj, convert to maven, have dependancies in pom.xml.

Basic code: 
given (this method carries baseurl, query parameter, body-if any) 
when (this method carries http method, resource and submit. To remember easily, top line should come in when except baseurl)
then (verify response)

import static io.restassured.RestAssured.*;
import static org.hamcrest.Matchers.*;

public class Basics {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		baseURI = "https://rahulshettyacademy.com";
		given().header("Content-Type","application/json").queryParam("key", "qaclick123")
		.body("{\r\n"
				+ "  \"location\": {\r\n"
				+ "    \"lat\": -38.383494,\r\n"
				+ "    \"lng\": 33.427362\r\n"
				+ "  },\r\n"
				+ "  \"accuracy\": 50,\r\n"
				+ "  \"name\": \"Simple house\",\r\n"
				+ "  \"phone_number\": \"(+91) 983 893 3937\",\r\n"
				+ "  \"address\": \"29, side layout, cohen 09\",\r\n"
				+ "  \"types\": [\r\n"
				+ "    \"shoe park\",\r\n"
				+ "    \"shop\"\r\n"
				+ "  ],\r\n"
				+ "  \"website\": \"http://google.com\",\r\n"
				+ "  \"language\": \"French-IN\"\r\n"
				+ "}")
		.when().post("maps/api/place/add/json")
		.then().log().body()
			.assertThat().statusCode(200)
			.body("scope", equalTo("APP"))
			.header("Server", "Apache/2.4.41 (Ubunu)");
		//instead of log().body(), log().all() can be used if we want all the details to be diplayed.
	}

}

output will be:
{
    "status": "OK",
    "place_id": "1d7761aeacbadc6a2f8ce5a77edd0e0d",
    "scope": "APP",
    "reference": "4f446a3b89e8a2eeb1b8efabf59d9b274f446a3b89e8a2eeb1b8efabf59d9b27",
    "id": "4f446a3b89e8a2eeb1b8efabf59d9b27"
}

Note: In then() block, header is validated.It is important to validate header to verify if response is received form expected server. Otherwise it means that, API has bug.

Can use, system.out.println() to view output by saving above data to string like below:
String strOutput = .extract().response().asString(); //.extract should be from then() Only from .extract is copied to save space. Check eclipse for brief view.

Now, System.out.println(strOutput) gives output body 

{"status":"OK","place_id":"1d7761aeacbadc6a2f8ce5a77edd0e0d","scope":"APP","reference":"4f446a3b89e8a2eeb1b8efabf59d9b274f446a3b89e8a2eeb1b8efabf59d9b27","id":"4f446a3b89e8a2eeb1b8efabf59d9b27"}


JSONPath:

It is just like xpath for xml. JSONPath traverse from parent to child using dot(.)

Output from above is stored as string. rahulshetty received this string, created object for json class placed string inside like below:
String strOutput = .extract().response().asString(); //.extract should be from then() Only from .extract is copied to save space. Check eclipse for brief 
JsonPath js = new JsonPath(strOutput);
System.out.println(js.getString("place_id"));

The above code can be easily written as:

JsonPath objJsonPath = .extract().response().jsonPath();
System.out.println(objJsonPath.getString("place_id"));

important note: We can verify place_id in below two methods:
1. assertThat().body("placed_id", "12gdgfdhhfdhfdh");
2. JsonPath objJsonPath = .extract().response().jsonPath();
System.out.println(objJsonPath.getString("place_id")); //now assert this.

But, we use jsonpath actually to get values of variables from post method and use it in get or put method.
 
f60201591296ce106f737675be316d5f

Test Case scenario:

Post a record, update it with put request and get the record to view.

Now for posting above code is used from where place_id is retrieved to use it for put request.

while doing put, note below that place_id is the variable holding value. Hence it is placed as, "+place_id+". It is like, variable is placed with ++ on both sides otherwise it will become string.
given().header("Content-Type", "application/json")
		.body("{\r\n"
				+ "\"place_id\":\""+place_id+ "\",\r\n"
				+ "\"address\":\"missionhighway, USA\",\r\n"
				+ "\"key\":\"qaclick123\"\r\n"
				+ "}\r\n"
				+ "");


Parsing complex or nested json:

Assume if dev has only output format of json but the api which produce the output is still not built. In such case, tester should not wait till api is ready. Since we have output template, tester can put the string template in json path and do rest part of execution. Once api is ready, that can be connected as input to json path.


Dynamic Json:
Like above, cannot use same data in api, it ll throw error as data already exists. In such case, we have to give new data each time or post and delete immediately.

mostly it will be static json unless client needs to validate with multipLe data.

@Test(dataProvider="sendData")
	public void dynamicJson(String isbn, String aisle) {
		RestAssured.baseURI = "http://216.10.245.166";
		given()
			.header("Content-Type","application/json")
			.body(objBodyContent.bodyDynamicJson(isbn,aisle))
		.when().post("Library/Addbook.php")
		.then().log().body().assertThat().statusCode(200);
		
	}
	
	@DataProvider
	public Object[][] sendData() {
		return new Object[][] {{"vsj","004"},{"vsj","005"}};
	}

if static, just put the body in separate class carrying isbn and aisle as variable, return body and call that method from main method passing values of isbn and aisle.

public String bodyDynamicJson(String isbn, String aisle) {
		return "{\r\n"
				+ "\"name\":\"Learn REST\",\r\n"
				+ "\"isbn\":\""+isbn+"\",\r\n"
				+ "\"aisle\":\""+aisle+"\",\r\n"
				+ "\"author\":\"jacob andrew\"\r\n"
				+ "}\r\n"
				+ "";
	}

given()
			.header("Content-Type","application/json")
			.body(objBodyContent.bodyDynamicJson("vsj","002"))

To get json as an external file, use filtutils, convert to string and paste inside body. coz, all methods in rest assured accepts string or integer only.


JIRA REST API:

This is just to work on jira repository via API where we can create issues and do multiple tasks as below:

Refer installation notepad for jira install.now in localhost8080 jira is opened. save all the serverids, repo name and key to access it.
refer below link for all below jira api's and its contracts.

https://docs.atlassian.com/software/jira/docs/api/REST/9.7.1/

Now we are going to login jira, go into our project repo RESTAPITesting (key RESTAPI) and create issue.

To restart jira, 

Navigate to the sub-directory where the batch file "Start-jira.bat" is located, e.g.
go to command terminal C:\Users\jansr\Atlassian\Jira\bin

Once in that sub-directory type Start-jira.bat /fg and press ENTER, to load your local host 8080

Note that: Key while creating project is used to let API know for which project we need to create issue or bug or anything whereas sessionkey is used to login under which user. So all the activities will be tagged under that particular user

api contract(below details are obtained from jira rest url :
Authentication:

https://developer.atlassian.com/cloud/jira/platform/jira-rest-api-cookie-based-authentication/)
baseuri - http://localhost:8080/rest/auth/1/session
body: { "username": "janani", "password": "SanjeevKrish@01" }  //this is our jira login credentials)

got this below from website: https://developer.atlassian.com/server/jira/platform/jira-rest-api-examples/

create issue:

http://localhost:8080/rest/api/2/issue
Header:
Cookie JSESSIONID=sessionkey obtained from authentication api. 

{
    "fields": {
       "project":
       {
          "key": "RESTAPI"
       },
       "summary": "From janani summary",
       "description": "Creating of an issue using project keys and issue type names using the REST API",
       "issuetype": {
          "name": "Bug"
       }
   }
}

above will give output as {"id":"10101","key":"RESTAPI-3","self":"http://localhost:8080/rest/api/2/issue/10101"}
if we check jira, new issue is created.

Delete issue:
Cookie JSESSIONID=sessionkey obtained from authentication api. 
url: http://localhost:8080/rest/api/2/issue/10101
where 10101 is id of issue created. request type should be DELETE.

add_comment:
http://localhost:8080/rest/api/2/issue/{issueIdOrKey}/comment
http://localhost:8080/rest/api/2/issue/RESTAPI-2/comment

header as application json and session id.
body:
{
    "body": "Adding comment from RESTAPI",
    "visibility": {
        "type": "role",
        "value": "Administrators"
    }
}
note: few success is 200 or 204 also check link for what should be the success response code. Output will be like below: In this, 10100 is the key of issueID and 10000 is the comment ID. now this comment ID can be  used to edit or delete the comment.

 "self": "http://localhost:8080/rest/api/2/issue/10100/comment/10000",
    "id": "10000",
    "author": etc etc

Update_comment:
http://localhost:8080/rest/api/2/issue/10100/comment/10000 //note here comment id 10000 is used update comment for issue 10100.
header as application json and session id.
body:
{
    "body": "updating comment",
    "visibility": {
        "type": "role",
        "value": "Administrators"
    }
}

now if we check jira, comment would have been updated.
got all these details from the link given in this jira topic starting.

Parameters:
parameter which comes after ? is called query parameter.
The one which comes without ? in url is called path parameter.

Note that, in contract if {} braces is given in resource, it means it is path parameter.
http://localhost:8080/rest/api/2/issue/{issueIdOrKey}/comment //here issueid or key is path parameter which should be given directly.
In such case in eclipse, given().pathParam() should be given instead of queryParam();

Now lets do above session creation using credentials, creating issues by automation restapi.

Once session is created, instead of saving in jsonpath and applying in other create issue api,
just create object for SessionFilter class, and use filter(session) to get and apply session for all the apis

public class JiraSessionAndIssueCreation {
	
	public JiraSessionAndIssueCreation() {		
		baseURI = "http://localhost:8080";
	}
	public SessionFilter objSession;
	
	
		@Test
		public void sessionCreation() {	
			objSession = new SessionFilter();
			given().header("Content-Type","application/json").body("{ \"username\": \"janani\", \"password\": \"SanjeevKrish@01\" }").filter(objSession)
			.when().post("rest/auth/1/session")
			.then().log().all().extract().jsonPath();
		}

Here, i have added baseURI in construction. Note that, declaration can happen as class variable like sessionfilter.
But baseURI is initialisation since baseURI is already a variable of restassured. in such case, we can use constructor.
for get issue in jira:

@Test(priority=2)
	public void getIssue() {
		JsonPath objJsonPath = given().filter(objSessionFilter)
		.when().get("rest/api/2/issue/10204")
		.then().extract().response().jsonPath();
		System.out.println(objJsonPath.getString("fields.comment.comments.body"));
	}

to create issue:
@Test(priority = 1)
	public void issueCreation() {
		given().header("Content-Type", "application/json").body()			.filter(objSession).when().post("rest/api/2/issue").then().log().body(given json content).assertThat().statusCode(201);
	}
To Add attachment to a issue:

Note that multipart is a method used to send attachments hence header also contains content =-type as multipart. also, to avoid some threats, xsrf check is given. it is given by atlassian, hence it is default one. not to memorize, just check jira contrack page link.

int intStatusCode = given().pathParam("id","10206").header("X-Atlassian-Token","no-check").header("content-type","multipart/form-data")
		.multiPart("file",new File("infoAttach.txt"))
		.filter(objSessionFilter)
		.when().post("rest/api/2/issue/{id}/attachments")
		.then().log().all().extract().response().statusCode();
		System.out.println(intStatusCode);


Important one:

Below code to, add comment to an issue using add_comment api (note the comment id which got generated for the newly added comment), now get the issue, using get_issue api (give issue id directly), get the comment ids list, find the index of noted comment id (say if comment id is 10234 and index is 1), get body of that numbered comment id(like, comment[1].body)

JsonPath objJsonPath = given().filter(objSessionFilter).pathParam("id", "10205").queryParam("fields", "comment").when().get("rest/api/2/issue/{id}").then().extract().response().jsonPath();
		List<String> mylist = objJsonPath.get("fields.comment.comments.id");
		int intIndexOfCommentID = mylist.indexOf(strCommentID); //strCommentID is obtained from add comment api.
		System.out.println(objJsonPath.getString("fields.comment.comments["+intIndexOfCommentID+"].body"));
		System.out.println(mylist.indexOf(strCommentID));		
		System.out.println(mylist);

Note that, we used queryParam to limit the parameters collected in JsonPath. It should also be mentioned in contract. Here, we limited only to comment. 
Hence, only comment of the json output body is stored in JsonPath.

*****************************************************

few api has SSL as it is https method. To avoid such issues, relaxedHTTPSValidation() is used.
 Use relaxed HTTP validation. This means that you'll trust all hosts regardless if the SSL certificate is invalid. 

given().relaxedHTTPSValidation().header("Content-Type", "application/json")

*****************************************************

OAuth 2.0:
login tripadvisor or bookmyshow or any websites using third party like google, linkedin, facebook etc. This type of third party authenticating to login our website is called OAuth.

Here, client is tripadvisor, resource owner is human, resource or authorisation server(2 servers works here) is google.
client ID and client secret id are the credentials provided by google to tripadvisor during their back end registration for the first time.

oAuth2.0 process:

There are different types of grant_type like authorisation_code, client_credentials, password_credentials etc.

To find the needed details or query params, refer contract details given by dev, if something is missing and to know which one it is, go to postman, try creating a request, under authorisation, select type as oAuth2.0, in right side, change grant_type to given options and see the query params it displaying based on option selected.

Authorisation_code grant type:
If human has to given credentials of google to view another application, it requires authorisation_code grant type

1.Authorisation:
Below is the sample url created by rahulshetty. 
URL can be constructed using below contract details(https://accounts.google.com/o/oauth2/v2/auth/<other contract query params details>. Now in that URL, Human has to give google credentials. 
On clicking login, details goes to authorisation server and it returns a code within URL itself.

2. Access token:
URL can be constructed using below contract details(https://www.googleapis.com/oauth2/v4/token/<other contract query params details>.
rahulshettyacademy.com(or trip advisor) sends that code to resource server of google. And the server will return access token.

3. Use Access Token to hit api and get details:
URL can be constructed using below contract details(https://rahulshettyacademy.com/getCourse.php/<other contract query params details>. 
Now rahulshettyacademy.com(or trip advisor) can access the access token to get user details like username, password etc.

OAuth 2.0 Contract Details:

GrantType	Authorization code
redirect URL/Callback URL	https://rahulshettyacademy.com/getCourse.php 
Authorization server url	https://accounts.google.com/o/oauth2/v2/auth
Access token url			https://www.googleapis.com/oauth2/v4/token
Client ID				692183103107-p0m7ent2hk7suguv4vq22hjcfhcr43pj.apps.googleusercontent.com //created by rahulshetty.com during oauth first time registration with google.
Client Secret			erZOWM9g3UtwNRj340YYaK_W //secret id which is not public. It is used during step-2.
Scope					https://www.googleapis.com/auth/userinfo.email //scope is the details required by rahulshetty.com from google. like username, email.
State					Any random string //this is a dummy data sent in step-1 and received during step-2. It confirms if there is no hacking or middle man and google returns the same dummy data we sent.
How to pass oauth in request	Headers


Mandatory fields for GetAuthorization Code Request ;
End Point : Authorization server url
Query Params:Scope, Auth_url, client_id, response_type (code), redirect_uri

output : Code


Mandatory fields for GetAccessToken Request :
End point : Access token url
Query Params :Code, client_id, client_secret, redirect_uri, grant_type (authorisation)
Output : Access token

urlEncodingEnabled(false) -> if code or access token as special characters like #$@ etc, if directly used, it will be assigned to some integers and the codeor token will not be valid. In such case, urlEncodingEnabled(false) is set so that, the special characters will be taken as it is instead of encoding it to integers. by default it is true.

************************

client_credentials grant type:
If the interaction is just between two applications where no user authorisation is required, in such case client_credentials are used. 

eg: in spice_jet, after successful flight booking, in confirmation page, hotel booking with offers based on your flight rate is displayed. It varies among users based on their flight booking cost. There is an interaction between flight and hotel with no consent from user, displays hotel details. So here, authorisation is not required, hence direct client details are provided. 
Meaning, second and third step of authorisation_code alone is performed.


So, in client credentials, only access token is received based on client id and secret, and get details api is hit. 
*************************

Password_credentials grant type:
it is similar to client_crendentials, but user-name and password is needed along with client id and secret.

**********************************************

POJO (Plain Old Java Object):

POJO is the constructed form of JSON using java methods. Always note that whatever json has key name, the same should be declared in pojo class.
for example: 
{
"message" : "hello"
}

POJO format would be:

public class myJson(){
private String message; // here same message is defined. if a variable names are defined something else, "something went wrong" error will be thrown.

public void setMessage(String Message){
this.message = message;
}

public String getMessage(){
return message;
}
}

myJson objmyJson = new myJson();
objmyJson.setMessage();


To get pojo format automatically via eclipse:
just create a class, declare variables like private String message or private List<WebAutomation> webAutomation. Select it and type alt+shift+s, click generate getter and setter

Serialisation: 
or set method: giving json payload as input.

Deserialisation:
or get method: Getting values from response body, assigning to pojo and getting values in readable format.

POJO vs JSONpath:
If the response body keeps varying, JSONpath is better to get values.
If the JSON fields are never changing, go with POJO for better readability.

POJO_Demo objPojoClass = given().relaxedHTTPSValidation().queryParam("access_token", strAccessToken).expect().defaultParser(Parser.JSON)
		.when().get("getCourse.php")
		.then().log().all().extract().response().as(POJO_Demo.class);



to see that POJO_Demo.class, refere eclipse.
public Courses getCourses() {
		return courses;
	}

	public void setCourses(Courses courses) {
		this.courses = courses;
	}




{ "instructor": "RahulShetty", "url": "rahulshettycademy.com", "services": "projectSupport", "expertise": "Automation",
"courses": { 
"webAutomation":
 [
 { "courseTitle": "Selenium Webdriver Java", "price": "50" },
 { "courseTitle": "Cypress",
"price": "40"
},
{
"courseTitle": "Protractor",
"price": "40"
}
],
"api": [
{
"courseTitle": "Rest Assured Automation using Java",
"price": "50"
},
{
"courseTitle": "SoapUI Webservices testing",
"price": "40"
}
],
"mobile": [
{
"courseTitle": "Appium-Mobile Automation using Java",
"price": "50"
}
]
},
"linkedIn": "https://www.linkedin.com/in/rahul-shetty-trainer/"
}



Serialisation:

To create json body using pojo and give as input in given().body(). see the below example:


Json for which pojo creation done below is:

{
  "location": {
    "lat": -38.383494,
    "lng": 33.427362
  },
  "accuracy": 50,
  "name": "Frontline house",
  "phone_number": "(+91) 983 893 3937",
  "address": "29, side layout, cohen 09",
  "types": [
    "shoe park",
    "shop"
  ],
  "website": "http://google.com",
  "language": "French-IN"
}
 



pojo:
import java.util.List;

public class Pojo_Json_Serialisation {
	
	private Location location;
	private int accuracy;
	private String name;
	private String phone_number;
	private String address;
	private List<String> types;
	private String website;
	private String language;
	
	public Location getLocation() {
		return location;
	}
	public void setLocation(Location location) {
		this.location = location;
	}
	public int getAccuracy() {
		return accuracy;
	}
	public void setAccuracy(int accuracy) {
		this.accuracy = accuracy;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getPhone_number() {
		return phone_number;
	}
	public void setPhone_number(String phone_number) {
		this.phone_number = phone_number;
	}
	public String getAddress() {
		return address;
	}
	public void setAddress(String address) {
		this.address = address;
	}
	public List<String> getTypes() {
		return types;
	}
	public void setTypes(List<String> types) {
		this.types = types;
	}
	public String getWebsite() {
		return website;
	}
	public void setWebsite(String website) {
		this.website = website;
	}
	public String getLanguage() {
		return language;
	}
	public void setLanguage(String language) {
		this.language = language;
	}
	
				
}



@Test
	public void pojoSerialisation() {
		baseURI = "https://rahulshettyacademy.com";
		Pojo_Json_Serialisation objConvertToJson = new Pojo_Json_Serialisation();
		objConvertToJson.setAccuracy(50);
		objConvertToJson.setAddress("100, Mission Parkway");
		objConvertToJson.setLanguage("Tamil");
		objConvertToJson.setName("Sanjeev Krishna");
		objConvertToJson.setPhone_number("5092345895");
		objConvertToJson.setWebsite("https://krishnacademy.com");
		List<String> types = new ArrayList<String>();
		types.add("shoe");
		types.add("socks");		
		objConvertToJson.setTypes(types);
		Location objLocation = new Location();
		objLocation.setLat(-34.35436);
		objLocation.setLng(56.09874);
		objConvertToJson.setLocation(objLocation);
		given().relaxedHTTPSValidation().header("Content-Type", "application/json").queryParam("key", "qaclick123").body(objConvertToJson).log().all().
		when().post("/maps/api/place/add/json").
		then().assertThat().statusCode(200).log().all().extract().response().jsonPath();
		
	}

Note: To check if we have created pojo correctly is, log all the input in given() statement as above.
now, we get input json in eclipse console, copy it and paste in online editor. It should give the exact json.


***********************************************
Spec Builders:

It is to create one utility for frequently used steps like, setting baseuri, content type, header, status code verification etc with the help of
request spec and response spec builders. Just create new object with it, it will show the return type in words as request specification, use it to write return type. 

Just like action class, this should also ends with build().

Now above will go in separate file during framework creation.

Next is to use, spec(req or res obj) to use that utility.

@Test
	public void specBuilder() {
		RequestSpecification objReqSpecs = new RequestSpecBuilder().setBaseUri("https://rahulshettyacademy.com")
				.setContentType(ContentType.JSON).addHeader("key", "qaclick123").build();
		ResponseSpecification objResSpecs = new ResponseSpecBuilder().expectContentType(ContentType.JSON)
				.expectStatusCode(200).build();

		RequestSpecification objGiven = given().spec(objReqSpecs).body(objConvertToJson);
		JsonPath objJsonPath = objGiven.when().post("/maps/api/place/add/json").then().spec(objResSpecs).extract()
				.response().jsonPath();
}


******************************************************
Creating contract details from network console in browser:
Dev may ask to get contract details from network in browser itself. In such case follow below steps:

First go to https://rahulshettyacademy.com/client and create your account.
Now login and Open network console where, under name: login(), api contract details are given like below
Request URL:
https://rahulshettyacademy.com/api/ecom/auth/login
Request Method:
POST
Status Code:
200 OK
Remote Address:
3.110.88.201:443
Referrer Policy:
strict-origin-when-cross-orig

 Payload tab has json body input details.
{"userEmail":"jansree90@gmail.com","userPassword":"SanjeevKrish@01"}

Now, Response in console will be:
{
    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NDViMTA1YjU2OGMzZTlmYjE2ODM1NWUiLCJ1c2VyRW1haWwiOiJqYW5zcmVlOTBAZ21haWwuY29tIiwidXNlck1vYmlsZSI6MTIzNDU1Njc4MCwidXNlclJvbGUiOiJjdXN0b21lciIsImlhdCI6MTY4MzY4OTU4NiwiZXhwIjoxNzE1MjQ3MTg2fQ.tgVWZOz4_Aj6S12Ppxd_qeS9U9sbnc63XrCF1RV9LRM",
    "userId": "645b105b568c3e9fb168355e",
    "message": "Login Successfully"
}

Note that, this token will be labelled as "authorisation" and used for every action by that useremail. Only through this token/authorisation, shopping site will know either its janani adding products to cart or dinesh adding products to cart. Also, userID can be used for some actions based on contract details designed by dev.

Creation of product:

Create and delete product contract details should be given by dev as it is not done by direct users but other whole salers and it cannot be obtained in network console.

Note, form-data is given instead of json.
Just copy this, do bulk edit in postman and paste the details. Now, it will be in key:value pair.
Also, product image is from local, form-data can only access local files. But JSON can't do this.
To enable local access to files, go to postman settings -> general -> enable "Allow reading files outside working directory". Otherwise, paste the image in "C:\Users\jansr\Postman\files" and access directly.
In header, Authorisation is important to get placed. Its important for all type of actions made by the logged in user.


End point –https://rahulshettyacademy.com/api/ecom/product/add-product

Http Method - POST
Form Data -

productName:qwerty
productAddedBy:{{userId}}
productCategory:fashion
productSubCategory:shirts
productPrice:11500
productDescription:Addias Originals
productFor:women
productImage: {{localfile}}


Place-order:
below contract details are obtained in rahulshettyacademy.com/client network console and on selecting order and clicking on place order.

https://rahulshettyacademy.com/api/ecom/order/create-order
use same authorisation in header.
{
    "orders": [
        {
            "country": "India",
            "productOrderedId": "645bfbba568c3e9fb1690b75"
        }
    ]
}

here, product order id is created while creating that product.

output will be:
{
    "orders": [
        "645c0384568c3e9fb1690e8b"
    ],
    "productOrderId": [
        "645bfbba568c3e9fb1690b75"
    ],
    "message": "Order Placed Successfully"
}

Get Order details:

https://rahulshettyacademy.com/api/ecom/order/get-orders-details?id=645c0f80568c3e9fb169123b
and authorisation.

Delete Product:

https://rahulshettyacademy.com/api/ecom/product/delete-product/{{productId}}
and authorisation.




package rahulshettyShopping;

import static io.restassured.RestAssured.*;
import static org.hamcrest.Matchers.*;

import org.testng.annotations.Test;

import io.restassured.builder.RequestSpecBuilder;
import io.restassured.http.ContentType;
import io.restassured.specification.RequestSpecification;

public class E2E_Shopping {

	@Test
	public void login() {
		
		RequestSpecification objReqSpec = new RequestSpecBuilder().setRelaxedHTTPSValidation().setBaseUri("https://rahulshettyacademy.com").setContentType(ContentType.JSON).build();
		
	}

}




Json creation using pojo:

JSON:
{
    "orders": [
        {
            "country": "india",
            "productOrderedId": "645d7903568c3e9fb16a08a7"
        }
    ]
}

POJO will be like below:

		PlaceOrder objPlaceOrder = new PlaceOrder();
		objPlaceOrder.setCountry("india");
		objPlaceOrder.setProductOrderedId(strProductId);

		List<PlaceOrder> lstPlaceOrder = new ArrayList<PlaceOrder>();
		lstPlaceOrder.add(objPlaceOrder);

		ListPlaceOrders objLstPlaceOrders = new ListPlaceOrders();
		objLstPlaceOrders.setOrders(lstPlaceOrder);



given().spec(objReqSpec).body(objLstPlaceOrders);

*****************************

Cucumber:

To maintain code consistency, dynamic data should be used. 

for eg:

scenario: 1
then code diplays "true"

scenario: 2
then code displays "false"

Note: within quotes is meant to dynamic data and gherkin tidy interpret it automatically or we can just execute the runner and get the gherkin step definition in console itself.

sample feature file:
Feature: Google Map API HTTP request
Scenario: Validate if location is added using Google add API.
Given JSON Payload and Header Key
When User POST "maps/api/place/add/json" resource 
Then Response Status code should be 200
And "scope" in response body should be "APP"
And "status" in response body should be "OK"

Here, pojo will have all datasetup.

now, if it is not quotes, two step definition for two scenarios needed.
Since we made it dynamic, only passing value differs, and one step definition is enough.

below is the console way of giving missing step def.

io.cucumber.junit.UndefinedStepException: The step '"hello" on head' and 2 other step(s) are undefined.
You can implement these steps using the snippet(s) below:

@When("{string} on head")
public void on_head(String string) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Then("He faints {string}")
public void he_faints(String string) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}


Cucumber framework for google API:

Lesson-1: glue can work if there is only one stepdefinition file. but feature can be directly mentioned under "features" in test runner.

Lesson -2: if there is any error during execution, check for logs to see if our input details are correct and compare once with postman manual hit. It will solve the error.

Lesson-3: static variable can be accessed like classname.staticvariablename as static variable belongs to class and it is object independent. this is in reference to hooks, if(stepdef.placeid==null) statment

Leson-4: pojo doesn't support uppercase key values.
for eg: if json is 
{
    "ID" : "hell222"
}

pojo cannot be created for ID. By default it is taken as id only.

place_ids created during execution:
e1cddc0716ccb181d1a0c889c4a89f48
31d32565ca014342700b45d201090e28
a014b81ef7b4a0be678ac3ff179f6883
193b2d161128c461b583e8244e12da80
7ef69d79f092cf6e6e47896be49ba555
224c9a5f791781118f170ecba014473c
90237977c3358a37985726ea9e0c1a88
c6ab08823ce97c3339ab9e7f798da498
cbbb4ae6dc2ce1bc6678691b2367ba94
b34d96b0538785dfde91f4f3586b8266
9bc7e2c1b03644c882b8b5807db4157b
20dfd9dfb1ec675389e294c62cfd1672
287e16b61ee2c7b608589f3878337188
343b532379fe2383f4a7b46476a414bd
a7d04f585fdd2dc2a938d392d5cd48d9



Framework Structure:

Maven project: src and main folder created.

src: Packages for Feature, step defintions and test runner.java and each package contains class.

glue can work if there is only one stepdefinition file. but feature can be directly mentioned under "features" in test runner.
features = "src/test/java/bddFramework/cucumber/featureFiles/GoogleAPIs.feature"


main: packages for resources, pojo and payload is present.

resources has APIresource, global.properties and utilities.
pojo has serialise and deserialise files.
payload creates object for pojo and give input details to create payload, returns the object. this object is input to body(payloadobject) in step definition file.

Connecting all packages:
Feature is by default connected to step definition. Check click ctrl+space on each feature steps if it opens in step def file. If not, right click on project and convert it to cucumber project.

Payload files creates object of pojo files.

Step Definition file extends/inherits utilities and creates object for payload files.

Utlities gets properties from global.properties file.Utilities only carry request specification and global propery acquisition method.

APIresources is a enum class contains all resources to make it as end point like ADDAPI("maps/api/place/add/json")

Framework creation or Framework structure or Framework architecture or Framework diagram:

												    child			
							 enum class for API resources     Hooks
									|classname.valueOf  using annotations like @Before("DeleteGoogleAPI"). 
									V(enumconstant)	 >        ^
												/objcrn   |extends		

		objcreation	via testng Parent  		  child    	    extends Parent     system.getproperty		  
extentreport --->		Listener  Featurefile  <-->  StepDefinition 	      <---  Utilities       <---   global.properties
									^			
									| obj creation							
							payload creation.java																									^
									|obj creation							
							Pojoserialiseor deserialise																			




Dynamic data driven from feature file:

Scenario Outline: needs to be used instead of Scenario if we gonna have Examples(datasetup) like below

Scenario Outline: Validate if location is added using Google add API using dynamic data.
Given JSON Payload and Header Key with "<name>","<address>","<language>"
When User POST "maps/api/place/add/json" resource 
Then Response Status code should be 200
And "scope" in response body should be "APP"
And "status" in response body should be "OK"

Examples:
|name|address|language|
|vishnu|hyat|tamil|

Here, we give dynamic input via feature file.

in below code, only name, address and language are dynamic while sending as json, hence only those details are passed as params.

given() will be:
@Given("JSON Payload and Header Key with {string},{string},{string}")
	public void json_payload_and_header_key_with(String strName, String strAddress, String strLanguage)
			throws IOException {

		BodyForAddAPI objPayLoadwithParams = new BodyForAddAPI();
		objGivenSpec = given().spec(requestSpec())
				.body(objPayLoadwithParams.bodyForAddAPIwithParams(strName, strAddress, strLanguage));
	}

public AddSerialisation bodyForAddAPIwithParams(String strName, String strAddress, String strLanguage) {
		AddSerialisation objAddSerialisationwithParams = new AddSerialisation();
		Location objLocation = new Location();
		List<String> myList = new ArrayList<String>();
		myList.add("glouse");
		myList.add("jacket");
		objLocation.setLat(-38.383497);
		objLocation.setLng(26.89857);

		objAddSerialisationwithParams.setName(strName);
		objAddSerialisationwithParams.setLanguage(strLanguage);
		objAddSerialisationwithParams.setAddress(strAddress);
		objAddSerialisationwithParams.setPhone_number("8220734564");
		objAddSerialisationwithParams.setWebsite("https://sanjeevKrish.com");


*****************************

Now, the resources also should be given via some enum class. Below class can be easily created by eclipse with auto suggestion. create enum methods of constAddAPI and deleteapi. An error gets highlighted, click it to create constructor. Coz, constructor is important in enum class to get access to methods and variables.

Now, create a getter method for the variable strAPIResource. This will return the variable.

package bddFramework.cucumber.resources;

public enum APIresources {
	
	constAddAPI("maps/api/place/add/json"),
	constDeleteAPI("maps/api/place/delete");

	private String strAPIResource;

	
	APIresources(String strAPIResource) {
		// TODO Auto-generated constructor stub
		this.strAPIResource = strAPIResource;
	}
	
	public String getAPIResource() {
		return strAPIResource;
	}	

}



Utility file logic:

static RequestSpecification objReqSpec;
	FileOutputStream objFOS;

	public RequestSpecification requestSpec() throws IOException {

		if (objReqSpec == null) {
			objFOS = new FileOutputStream("TestLogs.txt", false);
		}
		objFOS = new FileOutputStream("TestLogs.txt", true);
		PrintStream objPrintStream = new PrintStream(objFOS);
		objReqSpec = new RequestSpecBuilder().setRelaxedHTTPSValidation().setBaseUri(globalData("baseURI"))
				.setContentType(ContentType.JSON).addQueryParam("key", "qaclick123")
				.addFilter(RequestLoggingFilter.logRequestTo(objPrintStream))
				.addFilter(ResponseLoggingFilter.logResponseTo(objPrintStream))
				.addFilter(ErrorLoggingFilter.logErrorsTo(objPrintStream)).build();
		return objReqSpec;
//		}


Here, objReqSpec is made static, so that, if objrequspec is null when it is called for first time, log file will be created freshly due to false in FILE OUTPUTSTREAM. If, objreqspec is not null, logs wil be appended.

To avoid static, logic can be written as, hitting first 0, second time 1, if, i>0, it will be true something like that.

similarly, place_id also static in stepdef file. coz, place_id is grabbed from google map add scenario and used the same to delete in delete google map scenario. Same value used for two scenarios. 
Always note that, for each scenario, variables declared will become null. To use same variable, it can be made as class variable, but to use same variable along with its value, it has to be made static class variable.

Hooks:

Hooks is used just like pre or post requisite in testng like @BeforeMethod or @Class. It is all based on feature file only.
Here, its only @Before, @BeforeStep, @BeforeAll
@Before - before scenario
@BeforeStep - before scenario lines
@BeforeAll - before all scenarios
@AfterAll - after all scenarios.

@Before runs before every scenario. @BeforeStep before every scenario step. 

Its just a class with code like below:
public class Hooks extends Utilities {

	Response objWhenResp;

	@Before("@DeleteGoogleAPI")
	public void beforeAddition() throws IOException {
		StepDefinitions objStepDef = new StepDefinitions();
		if (StepDefinitions.strActualPlaceIDValue == null) {
			objStepDef.json_payload_and_header_key();
			objWhenResp = objStepDef.user_hits_resource_using_http_method("ADDAPI", "POST");
			StepDefinitions.strActualPlaceIDValue = respToJsonPath(objWhenResp, "place_id");
		}
	}
}

Concept is, it is like dependonmethods in testng. if only deleteapi is called, place_id cannot created and used, hence, hooks is used to run few methods to generate place_id and proceed with execution.

if you are using Maven and want to run a subset of scenarios tagged with @smoke:

mvn test -Dcucumber.filter.tags="@smoke"

sameway, cucumber.features= can be used to run using feature

****************************
Test Runner params:

if you want to tell Cucumber to print code snippets in console for missing step definitions use the summary plugin, you can specify it like above
note that in junit also missing code snippets gets printed but that comes up with two extra lines which isn't user friendly to copy.
 if you want to check whether all feature file steps have corresponding step definitions, you can specify dryRun as true. By default it is false

Final test runner file:

package bddFramework.cucumber.testRunner;

import org.junit.runner.RunWith;
import io.cucumber.junit.Cucumber;
import io.cucumber.junit.CucumberOptions;

@RunWith(Cucumber.class)
@CucumberOptions(features = "src/test/java/bddFramework/cucumber/featureFiles/GoogleAPIs.feature", 
glue = {"bddFramework.cucumber.stepDefinitions"}, 
tags = ("@AddGoogleAPI"),dryRun=false,monochrome = true,
plugin = {"pretty", "summary", "json:target/jsonReports/cucumber-report.json"})

public class TestRunner {
}
}

*********************************

cucumber reporting:

cucumber damianszczepanik plugin can convert only json to html report. hence, json conversion is done in testrunner file shown above (json:target etc)
now, in that masterthought plugin, give latest version shown in github with label mvn central.
now under cucumber-html-reports, look for cucumber-feature.html where we can see the report.

Remove classification tag from plugin.

***************************************

Jenkins:

same process like learnt before.

command used:

test -D cucumber.filter.tags=@$Tags

choice parameter is named as tags like Name? Tags and 
Choices?
AddGoogleAPI
AddGoogleAPIwithParams
DeleteGoogleAPI
Regression

@ is used because, we run maven as: mvn test -D cucumber.filter.tags=@AddGoogleAPI //note that there should not be any spaces betweetn tags=@ Tried with spaces, and its throwing error. But quotes for @AddGoogleAPI isn't really required. hence in jenkins it is, @$Tags.

Graph QL:
It is a scripting language like SQL but to hit multiple API's and get only needed details from each api.
Benefit:
It increase the performance as not all fields are retrieved, only needed details are fetched.
If dev created graphql, ask for explorer.


Hashmap to Json:

It is rest assured job to convert hashmap to json. Hence, hashmap is directly passed.
similary, from excel, hashmap can be created and passed directly inside method body().
Only in selenium, we need objectmapper class to convert json to hashmap.

Note that hashmap should have HashMap<String, Object> myMap = new HashMap<String, Object>();
string object datatype. only then rest assured can recognise it.

import java.util.HashMap;

import org.testng.annotations.Test;

public class HashMapToJson {
	@Test
	public void dum() {
		HashMap<String, Object> myMap = new HashMap<String, Object>();
		myMap.put("name", "janani");
		myMap.put("class", "2");
		System.out.println(myMap);
		//note that, it is still hasmap but its rest assured library job to convert into json when passed inside body() method.
	}

}
 

DataFormatter:

This class can be used to format the cell value to string though it is int.
Check below code for reference.
Note: getCell(j) is used to directly format. But to perform any string actions like, .equal or assigning the output to a String variable, getStringCellValue should be used.
DataFormatter objDataFormatter = new DataFormatter();
		for(int i=0;i<intTotalRows;i++) {
			if(objWorkSheet.getRow(i).getCell(0).getStringCellValue().equals("AddBook")){
				for(int j=1; j<objWorkSheet.getRow(i).getLastCellNum(); j++) {
					String strKey = objWorkSheet.getRow(0).getCell(j).getStringCellValue();
					System.out.println(objWorkSheet.getRow(i).getCell(j));
					Object objValue = objDataFormatter.formatCellValue(objWorkSheet.getRow(i).getCell(j));
					objHashMap.put(strKey, objValue);
					
