API:

If UI is in angular or tagged to another UI like yellowpages, tripadvisor etc, then, UI cannot render data from backend code where data is sent accessed with database.

UI(java) -> Backend code (java) -> database (api is not needed)
UI(angular) -> Backend code (java) -> database (api is required to get data from angular, to convert user input details to json or xml format and send to backend code)
UI of tripadvisor(java or any) -> Backend code of vythiri -> database (api is needed since, tripadvisor is another company which shouldn't or can't access backend code of vythiri.

HTTP methods:

GET - get data from backend (Retrieve R)
POST - create new registration, new details to database (create C)
PUT- update existing details (Update U)
DELETE - delete any data already present (Delete D)

CRUD operations in short.

Resource or collection -> this determines which type of api to access in endpoint/baseurl
for eg:
google.com/maps -> google.com is baseurl and maps is a resource or collection Both baseurl and maps together is called endpoint. Baseurl is where server the server is located.
google.com/images -> google.com is baseurl and images is a resource

Path Parameter:
https://www.google.com/maps/111234 -> google.com is baseurl and maps is a resource or collectionor
collection, 111234 is a path parameter or ID or subresource, requesting api with response for parameter only 111234.

https://www.amazon.com/orders?sort_ by=20/12/2020  -> here date is not a sub resource, it is not drilling into orders, its just fetching the existing order by filtering. ? is query parameter.

Syntax for end point: baseurl/resource/(queryorpath) parameter

Header and cookies -> give additional details to api from UI.

To start testing api below "API Contract" should be provided by dev team:

BaseURl
Resource
Query
Http Method (POST OR DELETE OR PUT OR GET)
Sample Body

POST:
Key value is required in most of the APIs. few may not. It will be all updated in API Contract given by dev team.
give Params (Key and value - key, qaclick123) and give the body. when sent, details will be saved in database generating a place_id. It is unique for each record in database. Hence, other operations like GET, PUT, DELETE can be performed using place_id.

GET
give Params (Key and value - key, qaclick 123) and place_id and use GET API.

PUT:
in body, select raw and text as json
{
"place_id":"60bc31104f80eeca306516fde3460f43",
"address":"msnhighwa1y, USA",
"key":"qaclick123"
}

now if you see using GET request with place_id and key param, updated address will be displayed.
Note that in PUT request, it is enough if json has place_id and key.  Params update is not required.
It is all based on developers how they provide API contract. It varies for each API and developer.

DELETE:
give key param qaclick123 as always.
{
    "place_id":"60bc31104f80eeca306516fde3460f43"
}

Note: GET and POST are the http methods used usually. POST can take care of both update and delete if that respective api is used. 

***************************************

Coding:

Start coding with below static imports:

import static io.restassured.RestAssured.*;
import static org.hamcrest.Matchers.*;

Usual eclipse create java proj, convert to maven, have dependancies in pom.xml.

Basic code: 
given (this method carries baseurl, query parameter, body-if any) 
when (this method carries http method, resource and submit. To remember easily, top line should come in when except baseurl)
then (verify response)

import static io.restassured.RestAssured.*;
import static org.hamcrest.Matchers.*;

public class Basics {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		baseURI = "https://rahulshettyacademy.com";
		given().header("Content-Type","application/json").queryParam("key", "qaclick123")
		.body("{\r\n"
				+ "  \"location\": {\r\n"
				+ "    \"lat\": -38.383494,\r\n"
				+ "    \"lng\": 33.427362\r\n"
				+ "  },\r\n"
				+ "  \"accuracy\": 50,\r\n"
				+ "  \"name\": \"Simple house\",\r\n"
				+ "  \"phone_number\": \"(+91) 983 893 3937\",\r\n"
				+ "  \"address\": \"29, side layout, cohen 09\",\r\n"
				+ "  \"types\": [\r\n"
				+ "    \"shoe park\",\r\n"
				+ "    \"shop\"\r\n"
				+ "  ],\r\n"
				+ "  \"website\": \"http://google.com\",\r\n"
				+ "  \"language\": \"French-IN\"\r\n"
				+ "}")
		.when().post("maps/api/place/add/json")
		.then().log().body()
			.assertThat().statusCode(200)
			.body("scope", equalTo("APP"))
			.header("Server", "Apache/2.4.41 (Ubunu)");
		//instead of log().body(), log().all() can be used if we want all the details to be diplayed.
	}

}

output will be:
{
    "status": "OK",
    "place_id": "1d7761aeacbadc6a2f8ce5a77edd0e0d",
    "scope": "APP",
    "reference": "4f446a3b89e8a2eeb1b8efabf59d9b274f446a3b89e8a2eeb1b8efabf59d9b27",
    "id": "4f446a3b89e8a2eeb1b8efabf59d9b27"
}

Note: In then() block, header is validated.It is important to validate header to verify if response is received form expected server. Otherwise it means that, API has bug.

Can use, system.out.println() to view output by saving above data to string like below:
String strOutput = .extract().response().asString(); //.extract should be from then() Only from .extract is copied to save space. Check eclipse for brief view.

Now, System.out.println(strOutput) gives output body 

{"status":"OK","place_id":"1d7761aeacbadc6a2f8ce5a77edd0e0d","scope":"APP","reference":"4f446a3b89e8a2eeb1b8efabf59d9b274f446a3b89e8a2eeb1b8efabf59d9b27","id":"4f446a3b89e8a2eeb1b8efabf59d9b27"}


JSONPath:

It is just like xpath for xml. JSONPath traverse from parent to child using dot(.)

Output from above is stored as string. rahulshetty received this string, created object for json class placed string inside like below:
String strOutput = .extract().response().asString(); //.extract should be from then() Only from .extract is copied to save space. Check eclipse for brief 
JsonPath js = new JsonPath(strOutput);
System.out.println(js.getString("place_id"));

The above code can be easily written as:

JsonPath objJsonPath = .extract().response().jsonPath();
System.out.println(objJsonPath.getString("place_id"));

important note: We can verify place_id in below two methods:
1. assertThat().body("placed_id", "12gdgfdhhfdhfdh");
2. JsonPath objJsonPath = .extract().response().jsonPath();
System.out.println(objJsonPath.getString("place_id")); //now assert this.

But, we use jsonpath actually to get values of variables from post method and use it in get or put method.
 
f60201591296ce106f737675be316d5f

Test Case scenario:

Post a record, update it with put request and get the record to view.

Now for posting above code is used from where place_id is retrieved to use it for put request.

while doing put, note below that place_id is the variable holding value. Hence it is placed as, "+place_id+". It is like, variable is placed with ++ on both sides otherwise it will become string.
given().header("Content-Type", "application/json")
		.body("{\r\n"
				+ "\"place_id\":\""+place_id+ "\",\r\n"
				+ "\"address\":\"missionhighway, USA\",\r\n"
				+ "\"key\":\"qaclick123\"\r\n"
				+ "}\r\n"
				+ "");


Parsing complex or nested json:

Assume if dev has only output format of json but the api which produce the output is still not built. In such case, tester should not wait till api is ready. Since we have output template, tester can put the string template in json path and do rest part of execution. Once api is ready, that can be connected as input to json path.


Dynamic Json:
Like above, cannot use same data in api, it ll throw error as data already exists. In such case, we have to give new data each time or post and delete immediately.

mostly it will be static json unless client needs to validate with multipLe data.

@Test(dataProvider="sendData")
	public void dynamicJson(String isbn, String aisle) {
		RestAssured.baseURI = "http://216.10.245.166";
		given()
			.header("Content-Type","application/json")
			.body(objBodyContent.bodyDynamicJson(isbn,aisle))
		.when().post("Library/Addbook.php")
		.then().log().body().assertThat().statusCode(200);
		
	}
	
	@DataProvider
	public Object[][] sendData() {
		return new Object[][] {{"vsj","004"},{"vsj","005"}};
	}

if static, just put the body in separate class carrying isbn and aisle as variable, return body and call that method from main method passing values of isbn and aisle.

public String bodyDynamicJson(String isbn, String aisle) {
		return "{\r\n"
				+ "\"name\":\"Learn REST\",\r\n"
				+ "\"isbn\":\""+isbn+"\",\r\n"
				+ "\"aisle\":\""+aisle+"\",\r\n"
				+ "\"author\":\"jacob andrew\"\r\n"
				+ "}\r\n"
				+ "";
	}

given()
			.header("Content-Type","application/json")
			.body(objBodyContent.bodyDynamicJson("vsj","002"))

To get json as an external file, use filtutils, convert to string and paste inside body. coz, all methods in rest assured accepts string or integer only.


JIRA REST API:

This is just to work on jira repository via API where we can create issues and do multiple tasks as below:

Refer installation notepad for jira install.now in localhost8080 jira is opened. save all the serverids, repo name and key to access it.
refer below link for all below jira api's and its contracts.

https://docs.atlassian.com/software/jira/docs/api/REST/9.7.1/

Now we are going to login jira, go into our project repo RESTAPITesting (key RESTAPI) and create issue.

To restart jira, 

Navigate to the sub-directory where the batch file "Start-jira.bat" is located, e.g.
go to command terminal C:\Users\jansr\Atlassian\Jira\bin

Once in that sub-directory type Start-jira.bat /fg and press ENTER, to load your local host 8080

api contract(below details are obtained from jira rest url :
Authentication:

https://developer.atlassian.com/cloud/jira/platform/jira-rest-api-cookie-based-authentication/)
baseuri - http://localhost:8080/rest/auth/1/session
body: { "username": "janani", "password": "SanjeevKrish@01" }  //this is our jira login credentials)

got this below from website: https://developer.atlassian.com/server/jira/platform/jira-rest-api-examples/

create issue:

http://localhost:8080/rest/api/2/issue
Header:
Cookie JSESSIONID=sessionkey obtained from authentication api. 

{
    "fields": {
       "project":
       {
          "key": "RESTAPI"
       },
       "summary": "From janani summary",
       "description": "Creating of an issue using project keys and issue type names using the REST API",
       "issuetype": {
          "name": "Bug"
       }
   }
}

above will give output as {"id":"10101","key":"RESTAPI-3","self":"http://localhost:8080/rest/api/2/issue/10101"}
if we check jira, new issue is created.

Delete issue:
Cookie JSESSIONID=sessionkey obtained from authentication api. 
url: http://localhost:8080/rest/api/2/issue/10101
where 10101 is id of issue created. request type should be DELETE.

add_comment:
http://localhost:8080/rest/api/2/issue/{issueIdOrKey}/comment
http://localhost:8080/rest/api/2/issue/RESTAPI-2/comment

header as application json and session id.
body:
{
    "body": "Adding comment from RESTAPI",
    "visibility": {
        "type": "role",
        "value": "Administrators"
    }
}
note: few success is 200 or 204 also check link for what should be the success response code. Output will be like below: In this, 10100 is the key of issueID and 10000 is the comment ID. now this comment ID can be  used to edit or delete the comment.

 "self": "http://localhost:8080/rest/api/2/issue/10100/comment/10000",
    "id": "10000",
    "author": etc etc

Update_comment:
http://localhost:8080/rest/api/2/issue/10100/comment/10000 //note here comment id 10000 is used update comment for issue 10100.
header as application json and session id.
body:
{
    "body": "updating comment",
    "visibility": {
        "type": "role",
        "value": "Administrators"
    }
}

now if we check jira, comment would have been updated.
got all these details from the link given in this jira topic starting.

Parameters:
parameter which comes after ? is called query parameter.
The one which comes without ? in url is called path parameter.

Note that, in contract if {} braces is given in resource, it means it is path parameter.
http://localhost:8080/rest/api/2/issue/{issueIdOrKey}/comment //here issueid or key is path parameter which should be given directly.
In such case in eclipse, given().pathParam() should be given instead of queryParam();

Now lets do above session creation using credentials, creating issues by automation restapi.

Once session is created, instead of saving in jsonpath and applying in other create issue api,
just create object for SessionFilter class, and use filter(session) to get and apply session.

public class JiraSessionAndIssueCreation {
	
	public JiraSessionAndIssueCreation() {		
		baseURI = "http://localhost:8080";
	}
	public SessionFilter objSession;
	
	
		@Test
		public void sessionCreation() {	
			objSession = new SessionFilter();
			given().header("Content-Type","application/json").body("{ \"username\": \"janani\", \"password\": \"SanjeevKrish@01\" }").filter(objSession)
			.when().post("rest/auth/1/session")
			.then().log().all().extract().jsonPath();
		}

Here, i have added baseURI in construction. Note that, declaration can happen as class variable like sessionfilter.
But baseURI is initialisation since baseURI is already a variable of restassured. in such case, we can use constructor.
for get issue in jira:

@Test(priority=2)
	public void getIssue() {
		JsonPath objJsonPath = given().filter(objSessionFilter)
		.when().get("rest/api/2/issue/10204")
		.then().extract().response().jsonPath();
		System.out.println(objJsonPath.getString("fields.comment.comments.body"));
	}

to create issue:
@Test(priority = 1)
	public void issueCreation() {
		given().header("Content-Type", "application/json").body()			.filter(objSession).when().post("rest/api/2/issue").then().log().body(given json content).assertThat().statusCode(201);
	}
To Add attachment to a issue:

Note that multipart is a method used to send attachments hence header also contains content =-type as multipart. also, to avoid some threats, xsrf check is given. it is given by atlassian, hence it is default one. not to memorize, just check jira contrack page link.

int intStatusCode = given().pathParam("id","10206").header("X-Atlassian-Token","no-check").header("content-type","multipart/form-data")
		.multiPart("file",new File("infoAttach.txt"))
		.filter(objSessionFilter)
		.when().post("rest/api/2/issue/{id}/attachments")
		.then().log().all().extract().response().statusCode();
		System.out.println(intStatusCode);
